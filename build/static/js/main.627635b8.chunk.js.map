{"version":3,"sources":["components/app-header/app-header.jsx","components/movie/movie.jsx","components/search/search.jsx","components/loader/loader.jsx","App.js","serviceWorker.js","index.js"],"names":["AppHeader","props","className","text","Movie","movie","poster","Poster","Title","width","alt","src","Year","Search","search","useState","searchValue","setSearchValue","value","onChange","e","target","type","onClick","preventDefault","Loader","MOVIE_API_URL","initialState","loading","movies","errorMessage","reducer","state","action","payload","error","App","useReducer","dispatch","useEffect","fetch","then","response","json","jsonResponse","Response","Error","map","index","key","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"mSAeeA,G,YAVG,SAAAC,GAAK,OACnB,4BAAQC,UAAU,cACd,4BAAKD,EAAME,SCmBJC,EApBD,SAAC,GAAe,IAAbC,EAAY,EAAZA,MACTC,EACa,QAAjBD,EAAME,OALR,qGAKuDF,EAAME,OAE7D,OACE,yBAAKL,UAAU,SACb,4BAAKG,EAAMG,OACX,6BACE,yBACEC,MAAM,MACNC,IAAG,4BAAuBL,EAAMG,OAChCG,IAAKL,KAGT,+BAAKD,EAAMO,KAAX,OCeSC,EAhCA,SAACZ,GAAW,IAEjBa,EAAWb,EAAXa,OAFgB,EAIcC,mBAAS,IAJvB,mBAIjBC,EAJiB,KAIJC,EAJI,KAoBxB,OACI,0BAAMf,UAAU,UACd,2BACEgB,MAAOF,EACPG,SAlByB,SAAAC,GAC/BH,EAAeG,EAAEC,OAAOH,QAkBlBI,KAAK,SAEP,2BAAOC,QAbc,SAACH,GAC1BA,EAAEI,iBACFV,EAAOE,GALPC,EAAe,KAgByBK,KAAK,SAASJ,MAAM,aCnBjDO,G,MARA,kBACb,yBAAKvB,UAAU,UACb,yBAAKA,UAAU,uCAAsC,yBAAKA,UAAU,oBACpE,8BAAW,8BAAW,mCCApBwB,EAAgB,iDAEhBC,EAAe,CACnBC,SAAe,EACfC,OAAe,GACfC,aAAe,MAIXC,EAAU,SAACC,EAAOC,GACtB,OAAQA,EAAOX,MACb,IAAK,wBACH,OAAO,eACFU,EADL,CAEEJ,SAAS,EACTE,aAAc,OAElB,IAAK,wBACH,OAAO,eACFE,EADL,CAEEJ,SAAS,EACTC,OAAQI,EAAOC,UAEnB,IAAK,wBACH,OAAO,eACFF,EADL,CAEEJ,SAAS,EACTE,aAAcG,EAAOE,QAEzB,QACE,OAAOH,IA+FEI,MA3Ff,WAAe,MAiCaC,qBAAWN,EAASJ,GAjCjC,mBAiCNK,EAjCM,KAiCCM,EAjCD,KAmCbC,qBAAU,WAERC,MAAMd,GACHe,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GACJN,EAAS,CACPhB,KAAM,wBACNY,QAASU,EAAa/B,cAG3B,IAGH,IAsBQgB,EAAkCG,EAAlCH,OAAQC,EAA0BE,EAA1BF,aAAcF,EAAYI,EAAZJ,QAE9B,OACE,yBAAK1B,UAAU,OACb,kBAAC,EAAD,CAAWC,KAAK,iBAChB,kBAAC,EAAD,CAAQW,OA3BG,SAAAE,GACbsB,EAAS,CACPhB,KAAM,0BAGNkB,MAAM,8BAAD,OAA+BxB,EAA/B,qBACJyB,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAC0B,SAA1BA,EAAaC,SACfP,EAAS,CACLhB,KAAM,wBACNY,QAASU,EAAa/B,SAG1ByB,EAAS,CACLhB,KAAM,wBACNa,MAAOS,EAAaE,cAY5B,uBAAG5C,UAAU,aAAb,yCACA,yBAAKA,UAAU,UACZ0B,IAAYE,EACX,kBAAC,EAAD,MAAcA,EACd,yBAAK5B,UAAU,gBAAgB4B,GAE/BD,EAAOkB,KAAI,SAAC1C,EAAO2C,GAAR,OACT,kBAAC,EAAD,CAAOC,IAAG,UAAKD,EAAL,YAAc3C,EAAMG,OAASH,MAAOA,UC/GtC6C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMpB,MAAK,SAAAqB,GACjCA,EAAaC,kB","file":"static/js/main.627635b8.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport './app-header.css';\n\nconst AppHeader = props => (\n    <header className=\"app-header\">\n        <h2>{props.text}</h2>\n    </header>\n);\n\nAppHeader.propTypes = {\n    text: PropTypes.string.isRequired,\n}\n\nexport default AppHeader;","import React from \"react\";\n\nconst DEFAULT_PLACEHOLDER_IMAGE =\n  \"https://m.media-amazon.com/images/M/MV5BMTczNTI2ODUwOF5BMl5BanBnXkFtZTcwMTU0NTIzMw@@._V1_SX300.jpg\";\n\n\nconst Movie = ({ movie }) => {\n  const poster =\n    movie.Poster === \"N/A\" ? DEFAULT_PLACEHOLDER_IMAGE : movie.Poster;\n    \n  return (\n    <div className=\"movie\">\n      <h2>{movie.Title}</h2>\n      <div>\n        <img\n          width=\"200\"\n          alt={`The movie titled: ${movie.Title}`}\n          src={poster}\n        />\n      </div>\n      <p>({movie.Year})</p>\n    </div>\n  );\n};\n\n\nexport default Movie;","import React, { useState } from \"react\";\n\n\nconst Search = (props) => {\n\n  const { search } = props;\n  \n  const [searchValue, setSearchValue] = useState('');\n  \n  const handleSearchInputChanges = e => {\n    setSearchValue(e.target.value);\n  }\n  \n  const resetInputField = () => {\n    setSearchValue(\"\")\n  }\n\n  const callSearchFunction = (e) => {\n    e.preventDefault();\n    search(searchValue);\n    resetInputField();\n  }\n\n  return (\n      <form className=\"search\">\n        <input\n          value={searchValue}\n          onChange={handleSearchInputChanges}\n          type=\"text\"\n        />\n        <input onClick={callSearchFunction} type=\"submit\" value=\"SEARCH\" />\n      </form>\n    );\n}\n\nexport default Search;","import React from 'react';\nimport './loader.css';\n\nconst Loader = () => (\n  <div className=\"loader\">\n    <div className=\"loadingio-spinner-pulse-hlghgbxrmkr\"><div className=\"ldio-he5rkcg2tn4\">\n    <div></div><div></div><div></div>\n    </div></div>  \n  </div>\n)\n\nexport default Loader;","import React, { useState, useEffect, useReducer } from \"react\";\nimport './App.css';\n\nimport { AppHeader, Search, Movie, Loader } from './components/index'\n\n\nconst MOVIE_API_URL = \"https://www.omdbapi.com/?s=man&apikey=4a3b711b\";\n\nconst initialState = {\n  loading      : true,\n  movies       : [],\n  errorMessage : null\n};\n\n\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case \"SEARCH_MOVIES_REQUEST\":\n      return {\n        ...state,\n        loading: true,\n        errorMessage: null\n      };\n    case \"SEARCH_MOVIES_SUCCESS\":\n      return {\n        ...state,\n        loading: false,\n        movies: action.payload\n      };\n    case \"SEARCH_MOVIES_FAILURE\":\n      return {\n        ...state,\n        loading: false,\n        errorMessage: action.error\n      };\n    default:\n      return state;\n  }\n};\n\nfunction App() {\n\n  // Old way\n  // const [loading, setLoading] = useState(true);\n  // const [movies, setMovies] = useState([]);\n  // const [errorMessage, setErrorMessage] = useState(null);\n\n  // useEffect(() => {\n  //   fetch(MOVIE_API_URL)\n  //     .then(response => response.json())\n  //     .then(jsonResponse => {        \n  //       setMovies(jsonResponse.Search);\n  //       setLoading(false);\n  //     });\n  // }, []);\n\n  // const search = searchValue => {\n  //   setLoading(true);\n  //   setErrorMessage(null);\n\n  //   fetch(`https://www.omdbapi.com/?s=${searchValue}&apikey=4a3b711b`)\n  //     .then(response => response.json())\n  //     .then(jsonResponse => {\n  //       if (jsonResponse.Response === \"True\") {\n  //         setMovies(jsonResponse.Search);\n  //         setLoading(false);\n  //       } else {\n  //         setErrorMessage(jsonResponse.Error);\n  //         setLoading(false);\n  //       }\n  //     });\n  //   };\n\n  const [state, dispatch] = useReducer(reducer, initialState);\n\n  useEffect(() => {\n    \n    fetch(MOVIE_API_URL)\n      .then(response => response.json())\n      .then(jsonResponse => {\n        dispatch({\n          type: \"SEARCH_MOVIES_SUCCESS\",\n          payload: jsonResponse.Search\n        });\n      });\n  }, []);\n\n\n  const search = searchValue => {\n    dispatch({\n      type: \"SEARCH_MOVIES_REQUEST\"\n    });\n\n      fetch(`https://www.omdbapi.com/?s=${searchValue}&apikey=4a3b711b`)\n      .then(response => response.json())\n      .then(jsonResponse => {\n        if (jsonResponse.Response === \"True\") {\n          dispatch({\n              type: \"SEARCH_MOVIES_SUCCESS\",\n              payload: jsonResponse.Search\n          });\n        } else {\n          dispatch({\n              type: \"SEARCH_MOVIES_FAILURE\",\n              error: jsonResponse.Error\n          });\n        }\n      });\n  };\n\n  const { movies, errorMessage, loading } = state;\n    \n  return (\n    <div className=\"App\">\n      <AppHeader text=\"Movie Finder\" />\n      <Search search={search} />\n      <p className=\"App-intro\">Sharing a few of our favourite movies</p>\n      <div className=\"movies\">\n        {loading && !errorMessage ? (\n          <Loader />) : errorMessage ? (\n          <div className=\"errorMessage\">{errorMessage}</div>\n        ) : (\n          movies.map((movie, index) => (\n            <Movie key={`${index}-${movie.Title}`} movie={movie} />\n          ))\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}